{"version":3,"sources":["serviceWorker.js","api/api.js","components/App/App.js","index.js"],"names":["Boolean","window","location","hostname","match","mainUrl","apiKey","getMoviesResponse","a","from","to","promisesArr","x","push","fetch","Promise","all","responses","successfulResponse","filter","res","status","length","console","log","serializeMovies","moviesArr","reduce","acc","movie","id","getMoviesBanners","movies","map","banner","poster_path","getMovies","moviesOnPage","lastMovieId","lastId","errors","currentMovies","error","firstMovId","lastMovId","json","moviesWithBanners","moviesObj","App","fetchMovies","setState","isLoading","state","firstMovieId","pageHistory","Set","paginationHandler","e","page","target","dataset","pageNumber","newLastId","this","cards","Object","values","className","key","style","backgroundImage","original_title","data-page","onClick","disabled","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1c97a5d4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/*\n * https://www.themoviedb.org/settings/api\n * Ключ API (v3 auth)  21629b2bbf4bb4857806d309dcfd1837\n *\n * Пример API-запроса  https://api.themoviedb.org/3/movie/550?api_key=21629b2bbf4bb4857806d309dcfd1837\n *\n * Ключ доступа к API (v4 auth)\n * eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIyMTYyOWIyYmJmNGJiNDg1NzgwNmQzMDlkY2ZkMTgzNyIsInN1YiI6IjVlOTMwZjczY2NiMTVmMDAxMzZmMDFhMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.BLBaAiEsfkafJrpXoK5GHft3hGuE9hGlA6S-dI6b2OU\n *\n * https://developers.themoviedb.org/3/configuration/get-api-configuration\n */\n\nconst mainUrl = `https://api.themoviedb.org`;\nconst mainImgUrl = `https://image.tmdb.org`;\nconst apiKey = `21629b2bbf4bb4857806d309dcfd1837`;\n\nasync function getMoviesResponse(from = 0, to = 12) {\n  // console.log(from, to);\n  try {\n    const promisesArr = [];\n    for (let x = from; x < to; x++) {\n      promisesArr.push(fetch(`${mainUrl}/3/movie/${x}?api_key=${apiKey}`));\n    }\n\n    const responses = await Promise.all(promisesArr);\n    const successfulResponse = responses.filter((res) => res.status === 200);\n    return successfulResponse.length ? successfulResponse : null;\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}\n\n/**\n * Function serializeMovies, array of movies turn in the Object {movie.id: movie}\n * @param {Array} moviesArr\n */\nfunction serializeMovies(moviesArr) {\n  const moviesObj = moviesArr.reduce((acc, movie) => {\n    acc[movie.id] = movie;\n    return acc;\n  }, {});\n  return moviesObj;\n}\n\n/**\n * Add into movie object reference on the banner -> banner: 'string path'\n * @param {Array} movies\n */\nfunction getMoviesBanners(movies) {\n  const moviesWithBanners = movies.map((movie) => {\n    return {\n      ...movie,\n      banner: !movie.poster_path\n        ? null\n        : `${mainImgUrl}/t/p/w300${movie.poster_path}`,\n    };\n  });\n  return moviesWithBanners;\n}\n\nasync function getMovies(moviesOnPage = 12, lastMovieId = 0) {\n  let movies = [];\n  let lastId = lastMovieId;\n  let errors = 0;\n\n  // we need 12 movies, so let's get them\n  while (movies.length < moviesOnPage) {\n    const from = lastId;\n    const to = lastId + (moviesOnPage - movies.length);\n    const currentMovies = await getMoviesResponse(from, to);\n\n    // check fetch errors\n    if (!currentMovies) {\n      lastId++;\n      errors++;\n      if (errors === 40) {\n        return {\n          error: true,\n          movies: {},\n          firstMovId: 0,\n          lastMovId: 0,\n        };\n      }\n      continue;\n    }\n\n    errors = 0;\n\n    const moviesArr = await Promise.all(\n      currentMovies.map((movie) => movie.json())\n    );\n\n    movies = [...movies, ...moviesArr];\n    lastId = moviesArr[moviesArr.length - 1].id + 1;\n  }\n\n  // get movies pictures\n  const moviesWithBanners = getMoviesBanners(movies);\n\n  // serialize movies\n  const moviesObj = serializeMovies(moviesWithBanners);\n\n  return {\n    error: false,\n    movies: moviesObj,\n    firstMovId: movies[0].id,\n    lastMovId: movies[movies.length - 1].id,\n  };\n}\n\nexport { getMovies };\n","import React, { Component } from \"react\";\n\nimport { getMovies } from \"../../api/api\";\nimport \"./app.scss\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      error: false,\n      movies: null, // {movieId: movieObject}\n      moviesOnPage: 12,\n      pageNumber: 1,\n      firstMovieId: 0,\n      lastMovieId: 0,\n      pageHistory: [], //[2,17,...] -> [pageNumber = index + 1, firstMovieId]\n      isLoading: false,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovies();\n  }\n\n  fetchMovies = async () => {\n    await this.setState(() => ({\n      isLoading: true,\n    }));\n\n    const { moviesOnPage, lastMovieId } = this.state;\n    const { error, movies, firstMovId, lastMovId } = await getMovies(\n      moviesOnPage,\n      lastMovieId + 1\n    );\n\n    if (error) {\n      await this.setState(() => ({ error: true }));\n      return;\n    }\n    await this.setState(() => ({\n      movies,\n      error,\n      firstMovieId: firstMovId,\n      lastMovieId: lastMovId,\n      pageHistory: [...new Set([...this.state.pageHistory, firstMovId])],\n      isLoading: false,\n    }));\n  };\n\n  paginationHandler = async (e) => {\n    const { page } = e.target.dataset;\n\n    switch (page) {\n      case \"first\":\n        await this.setState(() => ({\n          pageNumber: 1,\n          lastMovieId: 0,\n        }));\n        break;\n      case \"previous\":\n        const newLastId = this.state.pageHistory[this.state.pageNumber - 2];\n        console.log(\"newLastId\", newLastId);\n        await this.setState(() => ({\n          pageNumber:\n            this.state.pageNumber !== 1\n              ? this.state.pageNumber - 1\n              : this.state.pageNumber,\n          lastMovieId: this.state.pageHistory[this.state.pageNumber - 2] - 1,\n        }));\n        break;\n      case \"next\":\n        await this.setState(() => ({\n          pageNumber: this.state.pageNumber + 1,\n        }));\n        break;\n    }\n    this.fetchMovies();\n  };\n\n  render() {\n    // console.log(this);\n\n    const cards =\n      !this.state.movies || this.state.error ? (\n        <div>\n          Error for fetching movies... Connect with administrator, please.\n        </div>\n      ) : (\n        Object.values(this.state.movies).map((movie) => (\n          <div\n            className=\"movie-card\"\n            key={movie.id}\n            style={{\n              backgroundImage: `url(${\n                movie.banner\n                  ? movie.banner\n                  : `./img/blank-img.jpg`\n              })`,\n            }}\n          >\n            id: {movie.id}, Title: {movie.original_title}\n          </div>\n        ))\n      );\n\n    return (\n      <div className=\"app-wrapper\">\n        <header>\n          <div className=\"header-wrapper\">\n            <h1>Movies by TMDB</h1>\n          </div>\n        </header>\n        <main>\n          <div className=\"main-wrapper\">\n            {cards}\n          </div>\n        </main>\n        <footer>\n          <div className=\"footer-wrapper\">\n            <button\n              data-page=\"first\"\n              onClick={this.paginationHandler}\n              disabled={\n                this.state.pageNumber === 1 ||\n                this.state.error ||\n                this.state.isLoading\n                  ? true\n                  : false\n              }\n              className=\"primary\"\n            >\n              Page 1\n            </button>\n            <button\n              data-page=\"previous\"\n              onClick={this.paginationHandler}\n              disabled={\n                this.state.pageNumber === 1 ||\n                this.state.error ||\n                this.state.isLoading\n                  ? true\n                  : false\n              }\n              className=\"primary\"\n            >\n              <i className=\"fa fa-chevron-left\"></i>\n              Prev\n            </button>\n            <span data-page=\"current\" className=\"current-page\">\n              Current Page:\n              <span className=\"current-page__number\">\n                {\" \"}\n                {this.state.pageNumber}\n              </span>\n            </span>\n            <button\n              data-page=\"next\"\n              onClick={this.paginationHandler}\n              disabled={this.state.error || this.state.isLoading ? true : false}\n              className=\"primary\"\n            >\n              Next\n              <i className=\"fa fa-chevron-right\"></i>\n            </button>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./resources/font-awesome/scss/font-awesome.scss\";\nimport \"./index.scss\";\nimport App from \"./components/App/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}